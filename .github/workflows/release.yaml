name: Release Docker Image and Binary

on:
  release:
    types: [created]

jobs:
  build-and-push-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag # Git 태그 그대로 사용 (예: v0.3.0)
            type=semver,pattern={{version}} # Git 태그에서 'v' 제거 (예: 0.3.0)

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-upload-binary:
    name: Build and Upload Windows Binary
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          target: x86_64-pc-windows-msvc

      - name: Build for Windows (MSVC)
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Determine Asset Name
        id: asset_name
        run: |
          RELEASE_TAG=${{ github.event.release.tag_name }}
          echo "ASSET_NAME=overlay-mcp-${RELEASE_TAG}-windows-amd64.exe" >> $env:GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/x86_64-pc-windows-msvc/release/overlay-mcp.exe
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/vnd.microsoft.portable-executable 