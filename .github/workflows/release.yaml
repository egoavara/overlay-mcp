name: Release Docker Image and Binary

on:
  push:
    branches:
      - main
  release:
    types: [created]

jobs:
  package-docker:
    name: Package Docker Images (linux/amd64, linux/arm64)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag # Git 태그 그대로 사용 (예: v0.3.0)
            type=semver,pattern={{version}} # Git 태그에서 'v' 제거 (예: 0.3.0)

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: false
          cache-from: type=gha,scope=overlay-mcp
          cache-to: type=gha,mode=max,scope=overlay-mcp

      - name: Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          cache-from: type=gha,scope=overlay-mcp
          cache-to: type=gha,mode=max,scope=overlay-mcp
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-binaries:
    name: Build Binary (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name_suffix: windows-amd64.exe
            asset_content_type: application/vnd.microsoft.portable-executable
            rustflags: ""
            needs_linker_install: false
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name_suffix: linux-amd64
            asset_content_type: application/octet-stream
            needs_linker_install: true
            linker: x86_64-linux-gnu-gcc
            linker_install_cmd: sudo apt-get update && sudo apt-get install -y musl-tools musl-dev gcc-x86-64-linux-gnu
          - os: ubuntu-latest
            target: aarch64-unknown-linux-musl
            asset_name_suffix: linux-arm64
            asset_content_type: application/octet-stream
            needs_linker_install: true
            linker: aarch64-linux-gnu-gcc
            linker_install_cmd: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: "1.86.0"
          cache-key: "rust-${{ runner.os }}-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}"
          target: ${{ matrix.target }}
          rustflags: ${{ matrix.rustflags }}

      - name: Install cross-linker if needed
        if: matrix.needs_linker_install
        run: ${{ matrix.linker_install_cmd }}
        shell: bash

      - name: Build (Windows MSVC)
        if: matrix.os == 'windows-latest'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build (Linux amd64 MUSL)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CC_x86_64_unknown_linux_musl: ${{ matrix.linker }}
          CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.linker }}

      - name: Build (Linux arm64 MUSL)
        if: matrix.target == 'aarch64-unknown-linux-musl'
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CC_aarch64_unknown_linux_musl: ${{ matrix.linker }}
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER: ${{ matrix.linker }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1.0.2
        if: ${{ github.event.release.tag_name != 'main' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./target/${{ matrix.target }}/release/overlay-mcp${{ endsWith(matrix.asset_name_suffix, '.exe') && '.exe' || '' }}
          asset_name: overlay-mcp-${{ github.event.release.tag_name }}-${{ matrix.asset_name_suffix }}
          asset_content_type: ${{ matrix.asset_content_type }} 